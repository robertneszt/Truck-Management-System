@model TMS_APP.Models.Trip

@{
    ViewData["Title"] = "TripDetail";
    Layout = "~/Views/Shared/_LayoutForDriver.cshtml";
}

<h1>Trip Details</h1>
<hr />
<div class="row">
    <div class="col-3">

        <table class="table table-bordered">
            <thead >
                <tr>
                    <th>

                    </th>
                    <th>

                    </th>
                </tr>
            </thead>
           
            <tbody>

            
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Id)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.Id)
                </td>
            </tr>
            <tr>


                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.CustomerName)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.CustomerName)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.PickupLocationAddress)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.PickupLocationAddress)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.PickupLocationCity)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.PickupLocationCity)
                </td>
            </tr>
                <tr>
                    <td class="col-sm-4">
                        @Html.DisplayNameFor(model => model.PickupLocationState)
                    </td>
                    <td class="col-sm-8">
                        @Html.DisplayFor(model => model.PickupLocationState)
                    </td>
                </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.PickupLocationCountry)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.PickupLocationCountry)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.DeliveryLocationAddress)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.DeliveryLocationAddress)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.DeliveryLocationCity)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.DeliveryLocationCity)
                </td>
            </tr>
                <tr>
                    <td class="col-sm-4">
                        @Html.DisplayNameFor(model => model.DeliveryLocationState)
                    </td>
                    <td class="col-sm-8">
                        @Html.DisplayFor(model => model.DeliveryLocationState)
                    </td>
                </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.DeliveryLocationCountry)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.DeliveryLocationCountry)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.PickupDate)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.PickupDate)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.DeliveryDate)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.DeliveryDate)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.ShipmentWeight)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.ShipmentWeight)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.TotalAmount)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.TotalAmount)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Quantity)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.Quantity)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Status)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.Status)
                </td>
            </tr>
            <tr>
                <td class="col-sm-4">
                    @Html.DisplayNameFor(model => model.DriverName)
                </td>
                <td class="col-sm-8">
                    @Html.DisplayFor(model => model.DriverName)
                </td>
            </tr>
            <tr>
                    <td> Estimate Distance </td>
                <td>

                        <form asp-action="UpdateDistance" asp-controller="Driver" method="post">
                            <input type="hidden" name="tripId" value="@Model.Id" />
                            <input type="text" name="estimateDistance" id="estimateDistance" />
@*                            <button type="button" onclick="updateDistance()">Input Distance</button>
*@                            <input type="submit" value="Update distance" />
                        </form>
                
                    </td>
            </tr>
            </tbody>
        </table>

    </div>
    <div class="col-9">

        
        <form >
            <label for="origin">Origin:</label>
            <input type="text" value=" @Model.PickupLocationAddress  @Model.PickupLocationCity @Model.PickupLocationState @Model.PickupLocationCountry " id="origin">
            <label for="destination">Destination:</label>
            <input type="text" value="@Model.DeliveryLocationAddress  @Model.DeliveryLocationCity @Model.DeliveryLocationState @Model.DeliveryLocationCountry " id="destination">
            
            <button type="button" onclick="calcRoute()">Get Route</button>
           
        </form>
        
        <div id="result" class="display-4"></div>
        <br />
        <div id="map"  style="min-height:600px"></div>

    </div>
</div>
@if (Model.Status == TMS_APP.Constants.TripStatus.Assigned)
{
    <div class="form-check">
       
        <br />
        <input class="form-check-input" style="width:1.5em;height:1.5em;" type="checkbox" name="Confirmed" />
        <label class="form-check-label"><strong>** I verified and confirmed the load info before picking up!</strong></label>
    </div>
    
}
<br />
<div class="row">
    <div class="col-2">
        <a asp-action="MyTrips">Back to List</a>
    </div>
   <div class="col-3">
    @*<a asp-action="TripDetail" asp-route-id=@Model.Id class="btn btn-primary"><i class="fa fa-pencil"></i>Check Detail</a>*@
    @if (Model.Status == TMS_APP.Constants.TripStatus.PendingAssign)
        {
            <form asp-action="ReleaseTrip" asp-controller="Driver" method="post">
                <div class="form-group">
                    <input  type="hidden" name="tripId" value="@Model.Id" />
                    <input type="submit" value="Reject this Trip" class="btn btn-primary" />
                </div>
            </form>
        }
        else if (Model.Status == TMS_APP.Constants.TripStatus.Assigned)
        {
            <form asp-action="PickUpLoad" asp-controller="Driver" method="post">
                <div class="form-group">
                    <input type="hidden" name="tripId" value="@Model.Id" />
                    <input type="submit" value="Pick Up Load" class="btn btn-primary" />
                </div>
            </form>
        }
        else if (Model.Status == TMS_APP.Constants.TripStatus.PickedUp)
        {
            <form asp-action="InTransportation" asp-controller="Driver" method="post">
                <div class="form-group">
                    <input type="hidden" name="tripId" value="@Model.Id" />
                    
                    <input type="submit" value="In Progress" class="btn btn-primary" />
                </div>
            </form>
        }
        else if (Model.Status == TMS_APP.Constants.TripStatus.InProgress)
        {
            <form asp-action="DeliveredTrip" asp-controller="Driver" method="post">
                <div class="form-group">
                    <input type="hidden" name="tripId" value="@Model.Id" />
                    <input type="submit" value="Load Delivered" class="btn btn-primary" />
                </div>
            </form>
        }
    </div>
</div>

<script>
    function calculateDistance() {
        var origin = document.getElementById('origin').value;
        var destination = document.getElementById('destination').value;

        var service = new google.maps.DistanceMatrixService();
        let estimateDistance;
        
        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: 'DRIVING', // You can use other travel modes like 'WALKING' or 'BICYCLING'
                unitSystem: google.maps.UnitSystem.METRIC,
            },
            function (response, status) {
                if (status === 'OK') {
                    var distance = response.rows[0].elements[0].distance.text;
                    var duration = response.rows[0].elements[0].duration.text;
                    document.getElementById('result').innerHTML = 'Distance: <strong>' + distance + '</strong><br>Duration: ' + duration;
                    //document.getElementById('estimateDistance').innerHTML = distance;
                 
                } else {
                    alert('Error: ' + status);
                }
            }
        );
               
       // jQuery.noConflict();

      //  function passDistance() {
       //     var data = {
       //         EstimateDistance: estimateDistance,
       //     };
      //      jQuery.ajax({
      //          url: "/Driver/PickUpLoad",
           //     type: "POST",
         //       dataType: "json",
         //       data: JSON.stringify(data),
                //success: function (mydata) {
                //    $("#UpdateDiv").html(mydata);
                 //   history.pushState('', 'New URL: ' + href, href); // This Code lets you to change url howyouwant
         //       });
       //     return false;
       // }
       // passDistance();

        //Get route
        //Doc: https://developers.google.com/maps/documentation/javascript/directions
        //initMap
        //var directionsDisplay;
        function initMap() {
             var directionsService = new google.maps.DirectionsService();
             var directionsRenderer = new google.maps.DirectionsRenderer();
             var ottawa = new google.maps.LatLng(45.4215, -75.6972);
             var mapOptions = {
            zoom: 7,
            center: ottawa
        }

        var map = new google.maps.Map(document.getElementById('map'), mapOptions);
        directionsRenderer.setMap(map);

            calcRoute(directionsService, directionsRenderer);
         }
        
        initMap();
       
    }
    function calcRoute(directionsService, directionsRenderer) {
       // var directionsService = new google.maps.DirectionsService();
       // var directionsRenderer = new google.maps.DirectionsRenderer();
        var start = document.getElementById('origin').value;
        var end = document.getElementById('destination').value;
        var request = {
            origin: start,
            destination: end,
            travelMode: 'DRIVING',
            drivingOptions: {
                departureTime: new Date(Date.now() + 1000),  // for the time N milliseconds from now.
                trafficModel: 'optimistic'
            }

        };
        directionsService.route(request, function (result, status) {
            if (status == 'OK') {
                directionsRenderer.setDirections(result);
            }
        });
    }

    function updateDistance(){
        var origin = document.getElementById('origin').value;
        var destination = document.getElementById('destination').value;

        var service = new google.maps.DistanceMatrixService();
        let estimateDistance;

        let estimateDistanceField = document.getElementById('estimateDistance');

        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: 'DRIVING', // You can use other travel modes like 'WALKING' or 'BICYCLING'
                unitSystem: google.maps.UnitSystem.METRIC,
            },
            function (response, status) {
                if (status === 'OK') {
                    var distance = response.rows[0].elements[0].distance.text;
                    var duration = response.rows[0].elements[0].duration.text;
                   // document.getElementById('result').innerHTML = 'Distance: <strong>' + distance + '</strong><br>Duration: ' + duration;
                    //document.getElementById('estimateDistance').innerHTML = distance;
                    estimateDistance = distance.slice(0, -3);
                    console.log(distance)
                    console.log(estimateDistance)
                    console.log(typeof (estimateDistance))
                } else {
                    alert('Error: ' + status);
                }
            }
        );

        estimateDistanceField.value = estimateDistance;
    }
    
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js" integrity="sha512-3gJwYpMe3QewGELv8k/BX9vcqhryRdzRMxVfq6ngyWXwo03GFEzjsUm8Q7RZcHPHksttq7/GFoxjCVUjkjvPdw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
